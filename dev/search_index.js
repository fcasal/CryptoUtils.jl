var documenterSearchIndex = {"docs":
[{"location":"api/#CryptoUtils-1","page":"Functions","title":"CryptoUtils","text":"","category":"section"},{"location":"api/#Number-to-bytes-conversion-1","page":"Functions","title":"Number to bytes conversion","text":"","category":"section"},{"location":"api/#","page":"Functions","title":"Functions","text":"CryptoUtils.b2n\nCryptoUtils.n2b","category":"page"},{"location":"api/#CryptoUtils.b2n","page":"Functions","title":"CryptoUtils.b2n","text":"b2n(str::String) -> BigInt\n\nConverts a byte-string to a number, converting the string from base 256 to base 10.\n\njulia> b2n(\"Hello world!\")\n22405534230753963835153736737\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.n2b","page":"Functions","title":"CryptoUtils.n2b","text":"n2b(n::Integer) -> String\n\nConverts a number to its bytes representation, effectively writing the number in base 256, and returning the corresponding bytes.\n\njulia> n2b(22405534230753963835153736737)\n\"Hello world!\"\n\n\n\n\n\n","category":"function"},{"location":"api/#Prime-numbers-1","page":"Functions","title":"Prime numbers","text":"","category":"section"},{"location":"api/#","page":"Functions","title":"Functions","text":"CryptoUtils.random_prime\nCryptoUtils.safe_prime\nCryptoUtils.tower_two_prime\nCryptoUtils.get_first_primes\nCryptoUtils.twin_primes","category":"page"},{"location":"api/#CryptoUtils.random_prime","page":"Functions","title":"CryptoUtils.random_prime","text":"random_prime(bitsize::Integer) -> BigInt\n\nReturn a random prime with bitsize bits.\n\njulia> random_prime(42)\n2458636110727\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.safe_prime","page":"Functions","title":"CryptoUtils.safe_prime","text":"safe_prime(bitsize::Integer) -> BigInt\n\nReturn a random safe-prime q of the form q = 2 * p + 1 where p is also a prime number. The returning prime number has bitsize bits.\n\njulia> safe_prime(10)\n1439\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.tower_two_prime","page":"Functions","title":"CryptoUtils.tower_two_prime","text":"tower_two_prime(bitsize::Integer, tower_len::Integer) -> BigInt\n\nReturn a random prime of the form 2^towerlen * q + 1 with bitsize bits and where q is also a prime.\n\njulia> tower_two_prime(22, 6)\n2362433\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.get_first_primes","page":"Functions","title":"CryptoUtils.get_first_primes","text":"get_first_primes(k::Integer) -> Collection\n\nOutput the first k prime numbers.\n\njulia> get_first_primes(10)\n10-element Array{Int64,1}:\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.twin_primes","page":"Functions","title":"CryptoUtils.twin_primes","text":"twin_primes(bitsize::Integer)\n\nReturn a pair of prime numbers p, p + 2 with bitsize bits.\n\nThis might take a while to run.\n\n\n\n\n\n","category":"function"},{"location":"api/#Number-theory-1","page":"Functions","title":"Number theory","text":"","category":"section"},{"location":"api/#","page":"Functions","title":"Functions","text":"CryptoUtils.find_quadratic_non_residue\nCryptoUtils.is_quadratic_residue\nCryptoUtils.sqrt_mod_prime\nCryptoUtils.jacobi\nCryptoUtils.legendre\nCryptoUtils.continued_fraction\nCryptoUtils.convergents\nCryptoUtils.surd\nCryptoUtils.hoc_sqrt\nCryptoUtils.tonelli_shanks\nCryptoUtils.is_generator\nCryptoUtils.get_safe_prime_generator","category":"page"},{"location":"api/#CryptoUtils.find_quadratic_non_residue","page":"Functions","title":"CryptoUtils.find_quadratic_non_residue","text":"find_quadratic_non_residue(p::Integer)\n\nReturn a random number R which has no square root mod p, i.e., x^2 == R mod p has no solutions.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.is_quadratic_residue","page":"Functions","title":"CryptoUtils.is_quadratic_residue","text":"is_quadratic_residue(a::Integer, p::Integer) -> Bool\n\nReturn true or false depending on wheter a is a quadratic residue mod p.\n\nThat is, it checks if x^2 == a mod p has solutions.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.sqrt_mod_prime","page":"Functions","title":"CryptoUtils.sqrt_mod_prime","text":"sqrt_mod_prime(a::Integer, p::Integer) -> Integer\n\nSolves x^2 == a mod p and returns one of the square roots r. The other root is p - r. If there are no solutions, throws an exception.\n\njulia> sqrt_mod_prime(33^2, 73)\n33\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.jacobi","page":"Functions","title":"CryptoUtils.jacobi","text":"jacobi(n::Integer, k::Integer)\n\nReturn the Jacobi symbol of n, k.\n\nk should be an odd number.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.legendre","page":"Functions","title":"CryptoUtils.legendre","text":"legendre(a::Integer, p::Integer)\n\nReturn the Legendre symbol of (a, p).\n\np should be an odd prime number.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.continued_fraction","page":"Functions","title":"CryptoUtils.continued_fraction","text":"continued_fraction(a::T, b::T) where T <: Integer\n\nReturn the continued fraction of the rational a/b.\n\nExample\n\njulia> continued_fraction(31, 73)\n6-element Array{Int64,1}:\n 0\n 2\n 2\n 1\n 4\n 2\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.convergents","page":"Functions","title":"CryptoUtils.convergents","text":"convergents(a::T, b::T) where T <: Integer\n\nReturn the convergents of a rational a/b.\n\nExample\n\njulia> convergents(31, 73)\n6-element Array{Rational,1}:\n  0//1\n  1//2\n  2//5\n  3//7\n 14//33\n 31//73\n\n\n\n\n\nconvergents(cont_fraction::Array)\n\nReturn the convergents given the continued fraction of a rational.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.surd","page":"Functions","title":"CryptoUtils.surd","text":"surd(n::BigInt, k::Int64)\n\nReturn largest integer smaller or equal than the k-th root of n.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.hoc_sqrt","page":"Functions","title":"CryptoUtils.hoc_sqrt","text":"hoc_sqrt(a::Integer, p::Integer)\n\nAlgorithm from Handbook of cryptography, Koblitz pp 48-49. Finds a solution to x^2 == a mod p.\n\nIt assumes such solution exists.\n\nRunning time highly depends on |alpha|, assuming p-1 = 2^alpha * s, for an odd s.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.tonelli_shanks","page":"Functions","title":"CryptoUtils.tonelli_shanks","text":"tonelli_shanks(a::Integer, p::Integer)\n\nImplements the Tonelli Shanks algorithm for computing square roots modulo a prime number.\n\nIt assumes such square roots exist.\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.is_generator","page":"Functions","title":"CryptoUtils.is_generator","text":"is_generator(g::Integer, q::Integer, factors::Array) -> Bool\n\nReturns true if g is a generator of Z_q where q is prime and factors is the prime factorization of q - 1 = p1^e1 * p2^e2 ... * pk^ek.\n\nq = 2^7 * 5 + 1\nis_generator(2, q, [2, 5]) -> false\nis_generator(3, q, [2, 5]) -> true\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.get_safe_prime_generator","page":"Functions","title":"CryptoUtils.get_safe_prime_generator","text":"get_safe_prime_generator(q::BigInt) -> BigInt\n\nReturns a generator of Z_q, where q = 2 * p + 1 with q, p primes.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cryptography-1","page":"Functions","title":"Cryptography","text":"","category":"section"},{"location":"api/#","page":"Functions","title":"Functions","text":"CryptoUtils.factor_with_ed\nCryptoUtils.wiener","category":"page"},{"location":"api/#CryptoUtils.factor_with_ed","page":"Functions","title":"CryptoUtils.factor_with_ed","text":"factor_with_ed(n::Integer, e::Integer, d::Integer) -> (Integer, Integer)\n\nFactors n = p*q given (e, d) such that e*d = 1 mod phi(n) Stinson page 204 - algorithm 5.10\n\n\n\n\n\n","category":"function"},{"location":"api/#CryptoUtils.wiener","page":"Functions","title":"CryptoUtils.wiener","text":"wiener(n::Integer, e::Integer, dujella_bound=20)\n\nFactors the semiprime n, assuming Wiener's attack holds: d < n^(1/4), where d*e = 1 mod phi(n).\n\nUses Dujella extension attack. Increasing the dujella_bound argument slows the running time but increases chances of finding the correct d in case d ~ n^(1/4).\n\n\n\n\n\n","category":"function"},{"location":"#CryptoUtils.jl-1","page":"Home","title":"CryptoUtils.jl","text":"","category":"section"},{"location":"#Features-1","page":"Home","title":"Features","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package supports a number of cryptographic and number theory related primitives:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"generation of random prime numbers and safe primes;\nJacobi and Legendre symbols;\nmodular square roots;\ncontinued fractions of rationals and convergents;\n\"bytes to number\" and \"number to bytes\" conversion;\nRSA attacks:\nWiener's attack with Dujella's extension;\nFactor n = p*q, given e and d.","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"To install the package, simply run from the julia REPL:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> ]add CryptoUtils","category":"page"},{"location":"#Example-1","page":"Home","title":"Example","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"julia> using CryptoUtils\n\njulia> p = random_prime(512); q = random_prime(512); n = p*q # generate semiprime n\n131745220523048272797760331579564741491214753542423769574982847786514776153155250573474208964071358407384440164414712528658264269591534035958596966591477455650082238340858337257106511821924740760868219278777077341070367621453029038918351903399126114774879588852878367966142856170535138849910785240708139225987\n\njulia> e = 65537\n65537\n\njulia> d = invmod(e, (p-1)*(q-1))  # compute RSA decryption exponent\n32362883641310315451899592262377172791965856192371946631485250568611645044625881242387678564972226360689108476233462883544705990145324113781489121643593621753163078450834460663942035227770596133499206721223993086064885467845603112395435294663436699341967664046213003429586468421266641276398515468366056248785\n\njulia> factor_with_ed(n, e, d)  # factor n with n and d\n(11209007052907094316298587866392085453240213973638699831846376613053337678939099626874977325024647359864974367465362518878257931790980202563932031187056729, 11753513928682888932534842071560505691719602160983337271901213762089936749492510218729499032535262339600976674663969869808030961514878135483359095845990203)\n\njulia> p\n11209007052907094316298587866392085453240213973638699831846376613053337678939099626874977325024647359864974367465362518878257931790980202563932031187056729\n\njulia> q\n11753513928682888932534842071560505691719602160983337271901213762089936749492510218729499032535262339600976674663969869808030961514878135483359095845990203","category":"page"},{"location":"#Index-1","page":"Home","title":"Index","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"}]
}
